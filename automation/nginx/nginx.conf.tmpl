daemon off;

worker_processes  auto;

error_log  /var/log/nginx/error.log;

pid        /var/log/nginx/nginx.pid;

events {
    worker_connections  1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;

    log_format  main  '$status $remote_addr - $remote_user [$time_local]'
                      '"$request" $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for" "$upstream_addr"';

    access_log  /var/log/nginx/access.log  main;

    client_max_body_size 100m;
    add_header Strict-Transport-Security "max-age=63072000";
    proxy_set_header Host $http_host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto https;
    proxy_redirect off;

    ssl_certificate /etc/nginx/certs/${SSL_CERTIFICATE};
    ssl_certificate_key /etc/nginx/certs/${SSL_CERTIFICATE_KEY};

    server {
        listen       ${HTTP_PORT};
        return 301 https://$host$request_uri;
    }

    server {
        listen       ${HTTPS_PORT} ssl;
        server_name  ${ALLOWED_HOSTS};

        location / {
            proxy_pass http://${WEB_INTERNAL_HOST}:${GHOST_PORT};
        }
    }

    server {
        listen       ${HTTPS_PORT} ssl;
        server_name  ${SICKBEARD_HOST};

        location / {
            proxy_pass http://${WEB_INTERNAL_HOST}:${SICKBEARD_PORT};
        }
    }

    server {
        listen       ${HTTPS_PORT} ssl;
        server_name  ${COUCHPOTATO_HOST};

        location / {
            proxy_pass http://${WEB_INTERNAL_HOST}:${COUCHPOTATO_PORT};
        }
    }

    server {
        listen       ${HTTPS_PORT} ssl;
        server_name  ${HEADPHONES_HOST};

        location / {
            proxy_pass http://${WEB_INTERNAL_HOST}:${HEADPHONES_PORT};
        }
    }

    server {
        listen       ${HTTPS_PORT} ssl;
        server_name  ${DELUGE_HOST};

        location / {
            proxy_pass http://${WEB_INTERNAL_HOST}:${DELUGE_PORT};
        }
    }

    server {
        listen       ${HTTPS_PORT} ssl;
        server_name  ${SYNOLOGY_HOST};

        location / {
            proxy_pass http://${SYNOLOGY_INTERNAL_HOST}:${SYNOLOGY_PORT};
        }
    }
}
